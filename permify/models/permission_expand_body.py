# coding: utf-8

"""
    Permify API

    Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

    The version of the OpenAPI document: v1.1.3
    Contact: hello@permify.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from permify.models.argument import Argument
from permify.models.context import Context
from permify.models.entity import Entity
from permify.models.permission_expand_request_metadata import PermissionExpandRequestMetadata
from typing import Optional, Set
from typing_extensions import Self

class PermissionExpandBody(BaseModel):
    """
    PermissionExpandRequest is the request message for the Expand method in the Permission service.
    """ # noqa: E501
    metadata: Optional[PermissionExpandRequestMetadata] = None
    entity: Optional[Entity] = None
    permission: Optional[StrictStr] = Field(default=None, description="Name of the permission to be expanded, not required, must start with a letter and can include alphanumeric and underscore, max 64 bytes.")
    context: Optional[Context] = None
    arguments: Optional[List[Argument]] = Field(default=None, description="Additional arguments associated with this request.")
    __properties: ClassVar[List[str]] = ["metadata", "entity", "permission", "context", "arguments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PermissionExpandBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity
        if self.entity:
            _dict['entity'] = self.entity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in arguments (list)
        _items = []
        if self.arguments:
            for _item_arguments in self.arguments:
                if _item_arguments:
                    _items.append(_item_arguments.to_dict())
            _dict['arguments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PermissionExpandBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "metadata": PermissionExpandRequestMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "entity": Entity.from_dict(obj["entity"]) if obj.get("entity") is not None else None,
            "permission": obj.get("permission"),
            "context": Context.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "arguments": [Argument.from_dict(_item) for _item in obj["arguments"]] if obj.get("arguments") is not None else None
        })
        return _obj


