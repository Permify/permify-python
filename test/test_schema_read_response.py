# coding: utf-8

"""
    Permify API

    Permify is an open source authorization service for creating fine-grained and scalable authorization systems.

    The version of the OpenAPI document: v0.7.7
    Contact: hello@permify.co
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.schema_read_response import SchemaReadResponse

class TestSchemaReadResponse(unittest.TestCase):
    """SchemaReadResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SchemaReadResponse:
        """Test SchemaReadResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SchemaReadResponse`
        """
        model = SchemaReadResponse()
        if include_optional:
            return SchemaReadResponse(
                var_schema = openapi_client.models.schema_definition.SchemaDefinition(
                    entity_definitions = {
                        'key' : openapi_client.models.entity_definition.EntityDefinition(
                            name = '', 
                            relations = {
                                'key' : openapi_client.models.relation_definition.RelationDefinition(
                                    name = '', 
                                    relation_references = [
                                        openapi_client.models.relation_reference.RelationReference(
                                            type = '', 
                                            relation = '', )
                                        ], )
                                }, 
                            permissions = {
                                'key' : openapi_client.models.permission_definition.PermissionDefinition(
                                    name = '', 
                                    child = openapi_client.models.child.Child(
                                        leaf = openapi_client.models.leaf.Leaf(
                                            computed_user_set = openapi_client.models.computed_user_set.ComputedUserSet(
                                                relation = '', ), 
                                            tuple_to_user_set = openapi_client.models.tuple_to_user_set.TupleToUserSet(
                                                tuple_set = openapi_client.models.tuple_set.TupleSet(
                                                    relation = '', ), 
                                                computed = openapi_client.models.computed_user_set.ComputedUserSet(
                                                    relation = '', ), ), 
                                            computed_attribute = openapi_client.models.computed_attribute.ComputedAttribute(
                                                name = '', ), 
                                            call = openapi_client.models.v1/call.v1.Call(
                                                rule_name = '', 
                                                arguments = [
                                                    openapi_client.models.argument.Argument(
                                                        context_attribute = openapi_client.models.context_attribute.ContextAttribute(
                                                            name = '', ), )
                                                    ], ), ), 
                                        rewrite = openapi_client.models.rewrite.Rewrite(
                                            rewrite_operation = 'OPERATION_UNSPECIFIED', 
                                            children = [
                                                openapi_client.models.child.Child()
                                                ], ), ), )
                                }, 
                            attributes = {
                                'key' : openapi_client.models.attribute_definition.AttributeDefinition(
                                    name = '', 
                                    type = 'ATTRIBUTE_TYPE_UNSPECIFIED', )
                                }, 
                            references = {
                                'key' : 'REFERENCE_UNSPECIFIED'
                                }, )
                        }, 
                    rule_definitions = {
                        'key' : openapi_client.models.rule_definition.RuleDefinition(
                            name = '', 
                            arguments = {
                                'key' : 'ATTRIBUTE_TYPE_UNSPECIFIED'
                                }, 
                            expression = openapi_client.models.checked_expr.CheckedExpr(
                                reference_map = {
                                    'key' : openapi_client.models.v1alpha1/reference.v1alpha1.Reference(
                                        name = '', 
                                        overload_id = [
                                            ''
                                            ], 
                                        value = openapi_client.models.constant.Constant(
                                            null_value = '', 
                                            bool_value = True, 
                                            int64_value = '', 
                                            uint64_value = '', 
                                            double_value = 1.337, 
                                            string_value = '', 
                                            bytes_value = 'YQ==', 
                                            duration_value = '', 
                                            timestamp_value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                                    }, 
                                type_map = {
                                    'key' : openapi_client.models.v1alpha1/type.v1alpha1.Type(
                                        dyn = openapi_client.models.dyn.dyn(), 
                                        null = '', 
                                        primitive = 'PRIMITIVE_TYPE_UNSPECIFIED', 
                                        wrapper = 'PRIMITIVE_TYPE_UNSPECIFIED', 
                                        well_known = 'WELL_KNOWN_TYPE_UNSPECIFIED', 
                                        list_type = openapi_client.models.list_type.ListType(
                                            elem_type = openapi_client.models.v1alpha1/type.v1alpha1.Type(
                                                dyn = openapi_client.models.dyn.dyn(), 
                                                null = '', 
                                                map_type = openapi_client.models.map_type.MapType(
                                                    key_type = , 
                                                    value_type = , ), 
                                                function = openapi_client.models.function_type.FunctionType(
                                                    result_type = , 
                                                    arg_types = [
                                                        
                                                        ], ), 
                                                message_type = '', 
                                                type_param = '', 
                                                error = openapi_client.models.error.error(), 
                                                abstract_type = openapi_client.models.abstract_type.AbstractType(
                                                    name = '', 
                                                    parameter_types = [
                                                        
                                                        ], ), ), ), 
                                        map_type = openapi_client.models.map_type.MapType(), 
                                        function = openapi_client.models.function_type.FunctionType(), 
                                        message_type = '', 
                                        type_param = '', 
                                        error = openapi_client.models.error.error(), 
                                        abstract_type = openapi_client.models.abstract_type.AbstractType(
                                            name = '', ), )
                                    }, 
                                source_info = openapi_client.models.source_info.SourceInfo(
                                    syntax_version = '', 
                                    location = '', 
                                    line_offsets = [
                                        56
                                        ], 
                                    positions = {
                                        'key' : 56
                                        }, 
                                    macro_calls = {
                                        'key' : openapi_client.models.expr.Expr(
                                            id = '', 
                                            const_expr = openapi_client.models.constant.Constant(
                                                null_value = '', 
                                                bool_value = True, 
                                                int64_value = '', 
                                                uint64_value = '', 
                                                double_value = 1.337, 
                                                string_value = '', 
                                                bytes_value = 'YQ==', 
                                                duration_value = '', 
                                                timestamp_value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                            ident_expr = openapi_client.models.ident.Ident(
                                                name = '', ), 
                                            select_expr = openapi_client.models.select.Select(
                                                operand = openapi_client.models.expr.Expr(
                                                    id = '', 
                                                    call_expr = openapi_client.models.expr/call.Expr.Call(
                                                        target = , 
                                                        args = [
                                                            
                                                            ], ), 
                                                    list_expr = openapi_client.models.create_list.CreateList(
                                                        elements = [
                                                            
                                                            ], 
                                                        optional_indices = [
                                                            56
                                                            ], ), 
                                                    struct_expr = openapi_client.models.create_struct.CreateStruct(
                                                        message_name = '', 
                                                        entries = [
                                                            openapi_client.models.entry.Entry(
                                                                id = '', 
                                                                field_key = '', 
                                                                map_key = , 
                                                                optional_entry = True, )
                                                            ], ), 
                                                    comprehension_expr = openapi_client.models.comprehension.Comprehension(
                                                        iter_var = '', 
                                                        iter_range = , 
                                                        accu_var = '', 
                                                        accu_init = , 
                                                        loop_condition = , 
                                                        loop_step = , 
                                                        result = , ), ), 
                                                field = '', 
                                                test_only = True, ), 
                                            call_expr = openapi_client.models.expr/call.Expr.Call(), 
                                            list_expr = openapi_client.models.create_list.CreateList(), 
                                            struct_expr = openapi_client.models.create_struct.CreateStruct(
                                                message_name = '', ), 
                                            comprehension_expr = openapi_client.models.comprehension.Comprehension(
                                                iter_var = '', 
                                                accu_var = '', ), )
                                        }, ), 
                                expr_version = '', 
                                expr = , ), )
                        }, 
                    references = {
                        'key' : 'REFERENCE_UNSPECIFIED'
                        }, )
            )
        else:
            return SchemaReadResponse(
        )
        """

    def testSchemaReadResponse(self):
        """Test SchemaReadResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
